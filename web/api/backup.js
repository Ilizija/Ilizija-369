function pad(n){return n.toString().padStart(2,'0')} export default async function handler(req,res){ try{ const chunks=[]; for await(const c of req) chunks.push(c); const raw=Buffer.concat(chunks).toString('utf8'); const body=raw?JSON.parse(raw):{}; const label=String(body?.label||'').trim(); const owner=process.env.IK_OWNER, repo=process.env.IK_REPO, branch=process.env.IK_BRANCH||'main'; const token=process.env.IK_GH_TOKEN; if(!owner||!repo||!token) return res.status(400).json({error:'Missing IK_* envs'}); const base=await (await fetch(`https://api.github.com/repos/${owner}/${repo}/branches/${branch}`,{headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json'}})).json(); const sha=base.commit?.sha; const ts=new Date(); const stamp=`${ts.getFullYear()}-${pad(ts.getMonth()+1)}-${pad(ts.getDate())}_${pad(ts.getHours())}${pad(ts.getMinutes())}${pad(ts.getSeconds())}`; const safe=(label||'evolution').toLowerCase().replace(/[^a-z0-9._-]+/g,'-').replace(/^-+|-+$/g,''); const refName=`refs/heads/backup/${stamp}_${safe}`; const created=await (await fetch(`https://api.github.com/repos/${owner}/${repo}/git/refs`,{method:'POST',headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json','Content-Type':'application/json'},body:JSON.stringify({ref:refName,sha})})).json(); res.status(200).json({ok:true,ref:created.ref,sha:created.object?.sha?.slice(0,7)}); }catch(e){ res.status(500).json({error:e.message}); } }