function origin(req){ const proto=req.headers['x-forwarded-proto']||'https'; return `${proto}://${req.headers.host}`; } export default async function handler(req,res){ if(req.method!=='POST') return res.status(405).json({error:'Use POST'}); try{ const chunks=[]; for await(const c of req) chunks.push(c); const raw=Buffer.concat(chunks).toString('utf8'); const {title,content}=raw?JSON.parse(raw):{}; if(!title||!content) return res.status(400).json({error:'Missing title/content'}); const owner=process.env.IK_OWNER, repo=process.env.IK_REPO, branch=process.env.IK_BRANCH||'main'; const token=process.env.IK_GH_TOKEN; await fetch(`${origin(req)}/api/backup`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({label:`instr-${title}`})}); const base=await (await fetch(`https://api.github.com/repos/${owner}/${repo}/branches/${branch}`,{headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json'}})).json(); const baseSha=base.commit.sha; const stamp=new Date().toISOString().replace(/[:.]/g,'').slice(0,15); const safe=title.toLowerCase().replace(/[^a-z0-9._-]+/g,'-').replace(/^-+|-+$/g,''); const head=`instr/${stamp}_${safe}`; await fetch(`https://api.github.com/repos/${owner}/${repo}/git/refs`,{method:'POST',headers:{Authorization:`Bearer ${token}`,'Content-Type':'application/json',Accept:'application/vnd.github+json'},body:JSON.stringify({ref:`refs/heads/${head}`,sha:baseSha})}); const livePath='brain/instructions/system.md'; const liveUrl=`https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(livePath)}`; let sha; const get=await fetch(`${liveUrl}?ref=${encodeURIComponent(head)}`,{headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json'}}); if(get.ok){ const gj=await json(); sha=gj.sha; } const putLive=await fetch(liveUrl,{method:'PUT',headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json','Content-Type':'application/json'},body:JSON.stringify({message:`instructions: ${title}`,content:Buffer.from(content,'utf8').toString('base64'),branch:head,sha})}); if(!putLive.ok) return res.status(400).json({error:await putLive.text()}); const short=stamp.slice(0,8)+'_'+stamp.slice(9,15); const histPath=`brain/instructions/history/${short}_${safe}.md`; const putHist=await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(histPath)}`,{method:'PUT',headers:{Authorization:`Bearer ${token}`,Accept:'application/vnd.github+json','Content-Type':'application/json'},body: JSON.stringify({message:`instructions history: ${title}`,content:Buffer.from(content,'utf8').toString('base64'),branch:head})}); if(!putHist.ok) return res.status(400).json({error:await putHist.text()}); const pr=await (await fetch(`https://api.github.com/repos/${owner}/${repo}/pulls`,{method:'POST',headers:{Authorization:`Bearer ${token}`,'Content-Type':'application/json',Accept:'application/vnd.github+json'},body:JSON.stringify({title:`instructions: ${title}`,head,base:branch,body:'Auto-proposed by Iknow (or user). Backup created before changes.'})})).json(); res.status(200).json({ok:true,pr:{number:pr.number,url:pr.html_url,head}}); }catch(e){ res.status(500).json({ok:false,error:e.message}); } }