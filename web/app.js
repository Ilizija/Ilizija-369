function pad(n){ return n.toString().padStart(2, "0"); }
function dailyPath(){ const d=new Date(); const y=d.getFullYear(); const m=pad(d.getMonth()+1); const day=`${y}-${m}-${pad(d.getDate())}`; return `data/conversations/live/${y}/${m}/${day}_iknow-lite.txt`; }
const textEl=document.getElementById("text"), saveBtn=document.getElementById("saveBtn"), savePathEl=document.getElementById("savePath"), statusEl=document.getElementById("status");
const askEl=document.getElementById("ask"), askBtn=document.getElementById("askBtn"), answerEl=document.getElementById("answer");
const refreshStatusBtn=document.getElementById("refreshStatus"), statusOut=document.getElementById("statusOut"), treeEl=document.getElementById("tree"), evoList=document.getElementById("evoList");
const backupBtn=document.getElementById("backupBtn"), backupLabel=document.getElementById("backupLabel"), backupOut=document.getElementById("backupOut"), proposeBtn=document.getElementById("proposeBtn"), proposeOut=document.getElementById("proposeOut"), evoNote=document.getElementById("evoNote");
const loadInstr=document.getElementById("loadInstr"), instrMeta=document.getElementById("instrMeta"), instrText=document.getElementById("instrText"), instrTitle=document.getElementById("instrTitle"), proposeInstrBtn=document.getElementById("proposeInstr"), instrOut=document.getElementById("instrOut");
savePathEl.textContent=dailyPath();

async function refreshStatus(){ statusOut.textContent='Checking‚Ä¶'; try{
  const r=await fetch('/api/health-extended'); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Health failed');
  function badge(ok,label,extra=''){ const cls=ok?'ok':'err'; return `<span class="chip ${cls}">${label}${extra?` ${extra}`:''}</span>`; }
  const gh=j.github||{}, ai=j.openai||{};
  statusOut.innerHTML=[ badge(true,'Vercel'), badge(!!gh.ok,'GitHub',gh.lastCommit?`(${gh.lastCommit})`:''), badge(!!ai.ok,'OpenAI'), `<span class="small">${j.time||''}</span>` ].join(' &nbsp; ');
} catch(e){ statusOut.innerHTML=`<span class="err">${e.message}</span>`; } }
refreshStatusBtn.onclick=refreshStatus;

function renderTree(list){ const root={}; for(const t of list){ const parts=t.path.split('/'); let cur=root; for(let i=0;i<parts.length;i++){ const p=parts[i]; cur[p]=cur[p]||(i===parts.length-1?(t.type==='tree'?'dir':'file'):{}); cur=cur[p]; } } function walk(node,prefix=''){ const keys=Object.keys(node).sort((a,b)=>{ const A=node[a]==='file', B=node[b]==='file'; return (A===B)?a.localeCompare(b):(A?1:-1);}); let html="<ul style='margin:0 0 0 12px; padding:0; list-style:none'>"; for(const k of keys){ const v=node[k]; if(v==='file'){ html+=`<li>üìÑ ${prefix}${k}</li>`; } else if(v==='dir'){ html+=`<li>üìÅ ${prefix}${k}</li>`; } else { html+=`<li>üìÅ ${prefix}${k}${walk(v,prefix+k+'/')}</li>`; } } html+='</ul>'; return html; } treeEl.innerHTML=walk(root); }
async function refreshTree(){ try{ const r=await fetch('/api/tree'); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Tree failed'); renderTree(j.tree||[]); }catch(e){ treeEl.textContent=`Error: ${e.message}`; } }
function renderEvos(data){ const badge=s=>`<span class='chip'>${s}</span>`; let html=''; if((data.open||[]).length){ html+="<div class='small' style='opacity:.8'>Open</div>"; for(const p of data.open) html+=`<div>‚Ä¢ #${p.number} ${p.title} ${badge('open')} <a href='${p.url}' target='_blank'>view</a></div>`; } if((data.recent||[]).length){ html+="<div class='small' style='opacity:.8; margin-top:6px'>Recent</div>"; for(const p of data.recent) html+=`<div>‚Ä¢ #${p.number} ${p.title} ${p.merged?badge('merged'):badge('closed')} <a href='${p.url}' target='_blank'>view</a></div>`; } evoList.innerHTML=html||'‚Äî'; }
async function refreshEvos(){ try{ const r=await fetch('/api/evolutions'); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Evos failed'); renderEvos(j); }catch(e){ evoList.textContent=`Error: ${e.message}`; } }

saveBtn.onclick=async()=>{ const text=(textEl.value||'').trim(); if(!text){ statusEl.textContent='Type something first.'; return; } statusEl.textContent='Saving‚Ä¶'; const now=new Date().toISOString().slice(0,16).replace('T',' '); const path=dailyPath();
  try{ const r=await fetch('/api/log',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({path,line:`[${now}] Milenko: ${text}`})}); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Failed'); statusEl.textContent=`Saved to ${j.path}`; textEl.value=''; savePathEl.textContent=dailyPath(); }catch(e){ statusEl.textContent=`Error: ${e.message}`; }
};

askBtn.onclick=async()=>{ const prompt=(askEl.value||'').trim(); if(!prompt) return; answerEl.textContent='Thinking‚Ä¶'; try{ const r=await fetch('/api/reply',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt})}); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Failed'); answerEl.textContent=j.text; askEl.value=''; }catch(e){ answerEl.textContent=`Error: ${e.message}`; } };

backupBtn.onclick=async()=>{ backupOut.textContent='Backing up‚Ä¶'; try{ const r=await fetch('/api/backup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({label:backupLabel.value})}); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Backup failed'); backupOut.textContent=`Created ${j.ref} (${j.sha})`; refreshTree(); refreshEvos(); }catch(e){ backupOut.textContent=`Error: ${e.message}`; } };

proposeBtn.onclick=async()=>{ proposeOut.textContent='Proposing‚Ä¶'; try{ await fetch('/api/backup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({label:(backupLabel.value||'pre-propose')})}); const title=(evoNote.value.trim()||'tiny evolution'); const ts=new Date().toISOString().split('.')[0].replace('T',' '); const files=[{ path:`notes/evolutions/${new Date().toISOString().slice(0,10)}_${title.toLowerCase().replace(/[^a-z0-9._-]+/g,'-')}.md`, content:`# Evolution Proposal\\n\\n**When:** ${ts}\\n**By:** Iknow\\n\\n**Intent:** ${evoNote.value || '(unspecified)'}\\n` }];
  const r=await fetch('/api/propose',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title,files})}); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Propose failed'); proposeOut.innerHTML=`PR #${j.pr.number} opened ‚Äî <a href='${j.pr.url}' target='_blank'>view</a>`; evoNote.value=''; refreshEvos(); refreshTree(); }catch(e){ proposeOut.textContent=`Error: ${e.message}`; } };

loadInstr.onclick=async()=>{ instrMeta.textContent='Loading‚Ä¶'; try{ const r=await fetch('/api/instructions-get'); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Failed'); instrText.value=j.text||''; instrMeta.textContent=`path: ${j.path}${j.sha?` (${j.sha.slice(0,7)})`:''}`; }catch(e){ instrMeta.textContent=`Error: ${e.message}`; } };
proposeInstrBtn.onclick=async()=>{ instrOut.textContent='Proposing‚Ä¶'; try{ const title=(instrTitle.value||'').trim()||'refine instructions'; const content=(instrText.value||'').trim(); if(!content) throw new Error('No instructions content'); const r=await fetch('/api/instructions-propose',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title,content})}); const j=await r.json(); if(!r.ok) throw new Error(j.error||'Failed'); instrOut.innerHTML=`PR #${j.pr.number} opened ‚Äî <a href='${j.pr.url}' target='_blank'>view</a>`; refreshEvos(); refreshTree(); }catch(e){ instrOut.textContent=`Error: ${e.message}`; } };

refreshStatus(); refreshTree(); refreshEvos(); setInterval(refreshStatus,15000); setInterval(refreshEvos,20000);
